@import "queries";
@import "animations";

section {
  position: relative;
  box-sizing: border-box;
}

.spacer {
  flex: 1 1 auto;
}

.vail {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 0.4;
}
.shadow-vail {
  box-shadow: 0px 0px 1px 100vmax rgba(0,0,0,0.8)!important;
}
.bg-image {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  object-fit: cover;
  min-height: 100%;
  min-width: 100%;
}

.bg-container {
  position: relative;
  overflow: hidden;
}

.bold {
  font-weight: bold;
  letter-spacing: 1px;
}

.white {
  color: white;
}

.img-container {
  position: relative;
}

.clickable-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: transparent;
  z-index: 10;
}

.line-wv-dashes {
  background: repeating-linear-gradient(55deg, black, white 1px, white 3px);
  width: 100%;
  height: 3px;
}

@mixin scrollbar($color) {
  /* width */
  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  /* Track */
  ::-webkit-scrollbar-track {
    box-shadow: inset 0 0 5px grey;
    border-radius: 5px;
  }

  /* Handle */
  ::-webkit-scrollbar-thumb {
    background: $color;
    border-radius: 5px;
  }
}

@mixin appDir($ltr_property, $ltr_value, $rtl_property, $rtl_value) {
  @if $dir == "ltr" {
    #{$ltr_property}: $ltr_value;
  }
  @if $dir == "rtl" {
    #{$rtl_property}: $rtl_value;
  }
}

@mixin bg-img-mixin {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  min-height: 100%;
  width: 100%;
  object-fit: cover;
}

@mixin appDirLeft() {
  @if $dir == "ltr" {
    @content;
  }
}

@mixin appDirRight() {
  @if $dir == "rtl" {
    @content;
  }
}

@mixin apply-everyrow($every) {
  &:nth-of-type(#{$every}n + 1) {
    @content;
  }
}

@mixin box-ratio($big, $small) {
  position: relative;
  width: 100%;
  overflow: hidden;
  padding-top: $small/$big * 100%;
}

@mixin circle($diameter) {
  width: $diameter;
  height: $diameter;
  border-radius: $diameter;
}

@mixin box-shadow($horizontal, $vertical, $blur, $spread, $color, $inset: null) {
  @if $inset {
    box-shadow: inset $horizontal $vertical $blur $spread $color;
  } @else {
    box-shadow: $horizontal $vertical $blur $spread $color;
  }
}

@mixin centered-box() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin curve($position, $height, $hideAt: null, $inverse: null) {
  .curve {
    position: absolute;
    width: 100%;
    height: $height;
    overflow: hidden;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    @include appDir(left, 0, right, 0);
    @if $position == "top" {
      top: #{-$height + 1px};
    }
    @if $position == "bottom" {
      bottom: #{$height - 1px};
    }
    @if $hideAt {
      @include media("<=" + $hideAt) {
        display: none;
      }
    }
    img {
      min-width: 100%;
      max-height: 100%;
      @if $inverse {
        @include appDir(transform, rotatey(180deg), null, null);
      } @else {
        @include appDir(null, null, transform, rotatey(180deg));
      }
    }
  }
}

@mixin my-pagination() {
  margin: 30px 0;
  .page-numbers {
    font-size: 1rem;
    padding: 0.5rem 1rem;
    transition: all 0.3s;
    &.current {
      color: white;
      background-color: $primary;
      border-radius: 100px;
    }
    &.next {
      border: 2px solid lightgray;
      border-radius: 20px;
      i {
        @include appDir(margin-left, 10px, margin-right, 10px);
        font-size: 0.9rem;
      }
    }
    &.prev {
      border: 2px solid lightgray;
      border-radius: 20px;
      i {
        @include appDir(margin-right, 10px, margin-left, 10px);
        font-size: 0.9rem;
      }
    }
    &:hover {
      text-decoration: none;
      border-color: $primary;
    }
  }
}

@mixin if-direct-parent($parent-selector) {
  $current-sequences: &;
  $new-sequences: ();

  @each $sequence in $current-sequences {
    $current-selector: nth($sequence, -1);
    $prepended-selector: join($parent-selector, $current-selector);
    $new-sequence: set-nth($sequence, -1, $prepended-selector);
    $new-sequences: append($new-sequences, $new-sequence, comma);
  }

  @at-root #{$new-sequences} {
    @content;
  }
}

@import "components";
